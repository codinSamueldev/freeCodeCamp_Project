span[class~="sr-only"]{ /* este CSS es comúnmente utilizado para asegurar que los elementos seleccionados queden completamente ocultos visualmente. */
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important; /* La propiedad clip se usa para definir las visibles porciones de un elemento. */
    clip-path: inset(50%) !important; /* El clip-path determina la forma que el clip debe tomar. */
    height: 1px !important;
    width: 1px !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    /* Nos aseguramos de que no queden visibles, y también que no estén dentro la vista de la página. */
    position: absolute !important;
    padding: 0 !important;
    margin: -1px !important; /* La palabra clave !important permite que no estemos constantemente revisión de sobre-escribir nuestro código; por lo cual, esta nos asegura que las propiedades están siempre aplicadas, sin importar su orden o especifidad. */
}

html{
    box-sizing: border-box;
}

body{
    font-family: sans-serif;
    color: #0a0a23;
}

h1{
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
}

h1 .flex{
    display: flex;
    flex-direction: column-reverse;
    gap: 1rem;
}

h1 .flex span:first-of-type{ /* El pseudo-selector :first-of-type permite estilizar el primer elemento que concuerda con el elemento deseado. */
    font-size: 0.7em;
}

h1 .flex span:last-of-type{ /* El :last-of-type pseudo-selector hace totalmente lo contrario al anterior, por lo cual solo estiliza el último elemento que concuerda con el elemento deseado */
    font-size: 1.2em;
}

section{
    max-width: 40rem; /* Conviertiendo la tabla responsive. */
    margin: 0 auto;
    border: 2px solid gray;
}

#years{
    display: flex;
    justify-content: flex-end;
    position: sticky;
    top: 0;
    color: #fff;
    background-color: #0a0a23;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
    margin: 0 -2px;
    z-index: 999; /* Para evitar que los elementos se oculten en diferentes pilas, utilizamos la propiedad z-index: 999;  */
}

#years span[class]{ /* El #example span[class] permite estilizar cualquier span que tenga una clase definida sin importar el valor de la clase. */
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
}

.table-wrap{
    padding: 0 0.75rem 1.5rem 0.75rem;
}

span:not(.sr-only){ /* el pseudo-selector :not() estiliza todos los elementos a excepción del requerido; en el anterior ejemplo hicimos que todos los elementos tuviesen un font-weight normal a excepción de los elementos con la clase .sr-only */
    font-weight: normal;
}

table{
    border-collapse: collapse; /* Esta propiedad permite que las celdas colapsen entre sí, no dejan espacio alguno entre los bordes. */
    border: 0;
    width: 100%;
    position: relative;
    margin-top: 3rem;
}

table caption{
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute; /* Desde aquí, organizamos que los caption elements estuviesen como cabeceras, y hacia el lado izquierdo de la tabla. */
    top: -2.25rem;
    left: 0.5rem;
}

tbody td{ /* Con esto nos aseguramos, de que el width esté responsive debido a que los elementos se van a contraer a su container. */
    width: 100vw;
    max-width: 4rem;
    min-width: 4rem;
}

tbody th{
    width: calc(100% - 12rem);
}

tr[class="total"]{ /* Este selector estiliza todos los tr que tengan la clase con valor "total". La diferencia entre este y tr.total es, el primero seleccionará los tr elements donde solamente está la clase "total". El segundo, seleccionará los tr elements donde la clase incluya "total". */
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
}

tr[class="total"] th{
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}

tr.total td{
    text-align: right;
    padding: 0 0.25rem;
}

tr.total td:nth-of-type(3){
    padding: 0.5rem;
}

tr.total:hover{
    background: #99c9ff;
}

td.current{
    font-style: italic;
}

tr[class="data"]{
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th{
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}

tr.data th .description{
    display: block;
    font-style: italic;
    font-weight: normal;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
}

tr.data td{ /* Alineando los montos de dinero. */
    vertical-align: top;
    text-align: right;
    padding: 0.3rem 0.25rem 0;
}

tr.data td:last-of-type{
    padding-right: 0.5rem;
}